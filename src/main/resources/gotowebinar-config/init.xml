<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2017, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="init" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="The apiUrl of GoToWebinar."/>
    <parameter name="accessToken"
               description="Encrypted alphanumeric string to authenticate the GoToWebinar credentials."/>
    <parameter name="organizerKey"
               description="Unique numeric key returned with access token to identify the individual organizer."/>
    <parameter name="refreshToken" description="Refresh token used to get the Access token."/>
    <parameter name="clientId" description="Application client_id (i.e. API key)"/>
    <parameter name="registryPath"
               description="Registry Path of the Connector where the values are stored"/>
    <parameter name="intervalTime" description="The Interval time to check the accessToken validity"/>
    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.accessToken" expression="$func:accessToken"/>
        <property name="uri.var.organizerKey" expression="$func:organizerKey"/>
        <property name="uri.var.refreshToken" expression="$func:refreshToken"/>
        <property name="uri.var.clientId" expression="$func:clientId"/>
        <property name="uri.var.registryPath" expression="$func:registryPath"/>
        <property name="uri.var.intervalTime" expression="$func:intervalTime"/>
        <filter source="boolean($ctx:uri.var.refreshToken) and boolean($ctx:uri.var.clientId) and boolean($ctx:uri.var.accessToken)"
                regex="true">
            <then>
                <filter source="boolean($ctx:uri.var.intervalTime)" regex="false">
                    <then>
                        <property name="uri.var.intervalTime"
                                  value="31535400000"/>
                    </then>
                </filter>
                <filter source="boolean($ctx:uri.var.registryPath)" regex="true">
                    <then>
                        <property name="uri.var.accessTokenRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/accessToken' )"/>
                        <property name="uri.var.refreshTokenRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/refreshToken' )"/>
                        <property name="uri.var.timeRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/time' )"/>
                    </then>
                </filter>
                <property name="uri.var.accessToken.reg"
                          expression="get-property('registry', $ctx:uri.var.accessTokenRegistryPath)"/>
                <property name="uri.var.refreshToken.reg"
                          expression="get-property('registry', $ctx:uri.var.refreshTokenRegistryPath)"/>
                <property name="systemTime" expression="$ctx:SYSTEM_TIME"
                          scope="default"/>
                <filter source="$ctx:uri.var.accessToken.reg=''" regex="true">
                    <then>
                        <script language="js">
                            <![CDATA[
                           importPackage(Packages.org.apache.synapse.config);
                           var newAccess = mc.getProperty('uri.var.accessToken');
                           var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                           var newSysTime = mc.getProperty('systemTime');
                           var newTimeRegistryPath = mc.getProperty('uri.var.timeRegistryPath');
                           if(newAccess != null && newAccess != ''){
                               //Create the registry entry if no such entry exists.
                               mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath,false);
                               mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath,newAccess);
                               mc.getConfiguration().getRegistry().newResource(newTimeRegistryPath, false);
                               mc.getConfiguration().getRegistry().updateResource(newTimeRegistryPath, newSysTime);
                           }
                           ]]>
                        </script>
                    </then>
                    <else>
                        <property name="uri.var.accessToken" expression="$ctx:uri.var.accessToken.reg"/>
                    </else>
                </filter>
                <filter source="$ctx:uri.var.refreshToken.reg=''" regex="true">
                    <then>
                        <script language="js">
                            <![CDATA[
                           importPackage(Packages.org.apache.synapse.config);
                           var newRefresh = mc.getProperty('uri.var.refreshToken');
                           var newRefreshRegistryPath = mc.getProperty('uri.var.refreshTokenRegistryPath');
                           if(newRefresh != null && newRefresh != ''){
                               //Create the registry entry if no such entry exists.
                               mc.getConfiguration().getRegistry().newResource(newRefreshRegistryPath,false);
                               mc.getConfiguration().getRegistry().updateResource(newRefreshRegistryPath,newRefresh);
                           }
                           ]]>
                        </script>
                    </then>
                    <else>
                        <property name="uri.var.refreshToken" expression="$ctx:uri.var.refreshToken.reg"/>
                    </else>
                </filter>
                <property name="registryTime"
                          expression="get-property('registry', $ctx:uri.var.timeRegistryPath)"/>
                <script language="js"><![CDATA[
                    var time1 = mc.getProperty("systemTime");
                    var time2 = mc.getProperty("registryTime");
                    var timeTaken = time1 - time2;
                    mc.setProperty("INTERVAL_TIME", timeTaken);
                   ]]>
                </script>
                <!--If the access token is not in the registry(first call) or time interval less than 50 minutes , then get a new access token by calling getAccessTokenByRefreshToken method and store the time into registry-->
                <filter source="$ctx:INTERVAL_TIME &gt;$ctx:uri.var.intervalTime or $ctx:uri.var.accessToken=''"
                        regex="true">
                    <then>
                        <gotowebinar.getAccessTokenFromRefreshToken/>
                    </then>
                    <else>
                        <property name="uri.var.organizerKey" expression="$ctx:uri.var.organizerKey"/>
                    </else>
                </filter>
            </then>
        </filter>
        <property name="uri.var.apiUrl" expression="fn:concat($ctx:uri.var.apiUrl, '/G2W/rest')"/>
        <!-- Header information in request -->
        <header name="Authorization" expression="$ctx:uri.var.accessToken"
                scope="transport" action="set"/>
        <header name="Content-Type" value="application/json" scope="transport" action="set"/>
        <header name="Accept-Encoding" action="remove" scope="transport"/>
    </sequence>
</template>